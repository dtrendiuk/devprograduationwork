#!groovy
// Run TF and Ansible

properties([disableConcurrentBuilds()])

pipeline {
  agent any

  options {
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
      timestamps()
  }

  environment {
    CLOUDFLARE_TOKEN = credentials('cloudflare')
  }

  stages {

    stage('TF Apply DNS zone remove from default mode') {
        steps {
          withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-1']) {
          dir ("Terraform") {
          sh '''
            export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
            terraform init -var="enable_blue_deployment_cloudflare=false" -var="enable_green_deployment_cloudflare=false" -no-color
            terraform apply -var="enable_blue_deployment_cloudflare=false" -var="enable_green_deployment_cloudflare=false" -auto-approve -no-color
          '''
  }
    }
 }
}

    stage('Disaster Recovery TF Init&Plan') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-2']) {
        dir ("disaster_recovery/Terraform") {
        sh '''
          export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
          terraform init -no-color
          terraform plan -no-color
        '''
      }
        }
      }
    }

    stage('Disaster Recovery TF Apply Approval') {
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
         }
       }
     }

    stage('Disaster Recovery TF Apply') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-2']) {
        dir ("disaster_recovery/Terraform") {
        sh '''
          export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
          terraform apply -auto-approve -no-color
        '''
      }
        }
     }
    }

    stage('Disaster Recovery Ansible Approval') {
        steps {
          script {
           def userInput = input(id: 'confirm', message: 'Apply Ansible-playbook?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply ansible-playbook', name: 'confirm'] ])
          }
        }
      }

    stage('Disaster Recovery Ansible') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-2']) {
        dir ("disaster_recovery/Terraform") {
        sh '''
          scp -i ~/.ssh/ida_rsa -o StrictHostKeyChecking=no ~/secrets/vault_pass.txt ec2-user@$(terraform output -json bastion_ip | jq -r):/home/ec2-user
          ssh -i ~/.ssh/ida_rsa -o StrictHostKeyChecking=no ec2-user@$(terraform output -json bastion_ip | jq -r) "
          sudo yum update -y && sudo yum install git -y && sudo pip3 install ansible;
          mkdir /home/ec2-user/ansible && git clone https://github.com/dtrendiuk/devprograduationwork.git /home/ec2-user/ansible/;
          /home/ec2-user/ansible/disaster_recovery/Ansible/script.sh;
          rm -r /home/ec2-user/ansible && rm /home/ec2-user/vault_pass.txt
          "
        '''
      }
        }
      }
    }

    stage('Apply DNS zone switch to blue-deployment in disaster recovery mode') {
        steps {
          script {
            def userInput = input(id: 'confirm', message: 'Apply DNS zone switch to blue-deployment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply DNS zone switch to blue-deployment', name: 'confirm'] ])
          }
        }
      }

    stage('TF Apply DNS zone switch to blue-deployment in disaster recovery mode') {
        steps {
          withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-2']) {
          dir ("disaster_recovery/Terraform") {
          sh '''
            export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
            terraform apply -var="enable_blue_deployment_cloudflare=true" -var="enable_green_deployment_cloudflare=false" -auto-approve -no-color
          '''
  }
    }
 }
}
  }
}
